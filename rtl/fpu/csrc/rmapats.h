#ifndef __DO_RMAHDR_
#define __DO_RMAHDR_

#ifdef __cplusplus
  extern "C" {
#endif

typedef unsigned long UP;
typedef unsigned U;
typedef unsigned char UB;
typedef unsigned char scalar;
typedef struct vec32 vec32;
typedef unsigned short US;
typedef unsigned char SVAL;
typedef unsigned char TYPEB;
typedef struct qird QIRD;
typedef unsigned char UST_e;
typedef unsigned uscope_t;
typedef U  NumLibs_t;
struct vec32 {
    U  I1;
    U  I2;
};
typedef unsigned long RP;
typedef unsigned long RO;
typedef unsigned long long ULL;
typedef U  GateCount;
typedef U  NodeCount;
typedef unsigned short HsimEdge;
typedef unsigned char HsimExprChar;
typedef NodeCount  FlatNodeNum;
typedef U  InstNum;
typedef unsigned long long TimeStamp64;
typedef unsigned long long TimeStamp;
typedef enum {
    PD_SING = 0,
    PD_RF = 1,
    PD_PLSE = 2,
    PD_PLSE_RF = 3,
    PD_NULL = 4
} PD_e;
typedef TimeStamp  RmaTimeStamp;
typedef TimeStamp64  RmaTimeStamp64;
typedef union {
    double I643;
    unsigned long long I644;
    unsigned  I645[2];
} rma_clock_struct;
typedef struct eblk EBLK;
typedef int (* E_fn)(void);
typedef struct eblk {
    struct eblk * I652;
    E_fn  I653;
    struct iptmpl * I654;
    unsigned I656;
    struct eblk * I657;
} eblk_struct;
typedef struct {
    RP  I652;
    RP  I653;
    RP  I654;
    unsigned I656;
    RP  I657;
} RmaEblk;
typedef union {
    double I643;
    unsigned long long I644;
    unsigned  I645[2];
} clock_struct;
typedef clock_struct  RmaClockStruct;
typedef struct RmaRetain_t RmaRetain;
struct RmaRetain_t {
    RP  I683;
    RmaEblk  I651;
    U  I684;
    US  I685 :1;
    US  I686 :4;
    US  I176 :2;
    US  state :2;
    US  I688 :1;
    US  I689 :2;
    US  I690 :2;
    US  fHsim :1;
    US  I691 :1;
    scalar  newval;
    scalar  I693;
    RP  I694;
};
typedef struct MPSched MPS;
typedef struct RmaMPSched RmaMps;
struct MPSched {
    MPS  * I673;
    scalar  I674;
    scalar  I675;
    scalar  I676;
    scalar  fHsim :1;
    scalar  I176 :6;
    U  I678;
    EBLK  I679;
    void * I680;
    UP   I681[1];
};
struct RmaMPSched {
    RP  I673;
    scalar  I674;
    scalar  I675;
    scalar  I676;
    scalar  fHsim :1;
    scalar  I176 :6;
    U  I678;
    RmaEblk  I679;
    RP  I680;
    RP   I681[1];
};
typedef struct RmaMPSchedPulse RmaMpsp;
struct RmaMPSchedPulse {
    RP  I673;
    scalar  I674;
    scalar  I675;
    scalar  I676;
    scalar  I176;
    U  I678;
    RmaEblk  I679;
    scalar  I690;
    scalar  I698;
    scalar  I699;
    scalar  I700;
    U  I701;
    RmaClockStruct  I702;
    RmaClockStruct  I703;
    U  state;
    U  I704;
    RP  I654;
    RP  I705;
    RP  I706;
    RP   I681[1];
};
typedef struct MPItem MPI;
struct MPItem {
    U  * I708;
    void * I709;
};
typedef struct {
    RmaEblk  I651;
    RP  I710;
    scalar  I711;
    scalar  I690;
    scalar  I712;
} RmaTransEventHdr;
typedef struct RmaMPSchedPulseNewCsdf RmaMpspNewCsdf;
struct RmaMPSchedPulseNewCsdf {
    RP  I673;
    scalar  I674;
    scalar  I675;
    scalar  I676;
    scalar  fHsim :1;
    scalar  I176 :6;
    U  I678;
    RmaEblk  I679;
    scalar  I690;
    scalar  I698;
    scalar  I699;
    scalar  I700;
    U  state :4;
    U  I714 :28;
    RmaClockStruct  I702;
    RmaClockStruct  I703;
    RP  I715;
    RP  I654;
    RP  I716;
    RP   I681[1];
};
typedef struct red_t {
    U  I717;
    U  I718;
    U  I719;
} RED;
typedef struct predd {
    PD_e  I176;
    RED   I720[0];
} PREDD;
union rhs_value {
    vec32  I721;
    scalar  I711;
    vec32  * I690;
    double I722;
    U  I723;
};
typedef struct nbs_t {
    struct nbs_t * I724;
    struct nbs_t * I726;
    void (* I727)(struct nbs_t * I728);
    unsigned I729 :1;
    unsigned I730 :1;
    unsigned I731 :1;
    unsigned I732 :1;
    unsigned I733 :27;
    U  I734;
    void * I735;
    union rhs_value I736;
    vec32  I643;
    union {
        struct nbs_t * first;
        struct nbs_t * last;
    } I738;
} NBS;
typedef struct {
    RP  I739;
    RP  I705;
    RP  I654;
    RP  I706;
    RmaEblk  I651;
    RmaEblk  I740;
    RP  I741;
    scalar  I711;
    scalar  I690;
    char state;
    uscope_t  I742;
    U  I743;
    RP  I744;
    scalar  I698;
    scalar  I699;
    scalar  I700;
    RmaClockStruct  I702;
    RmaClockStruct  I703;
    RP  I680;
} RmaPulse;
typedef struct {
    UP  I745;
    int * I746;
} TypeData;
struct etype {
    U  I550 :8;
    U  I551 :24;
    U  I552;
    U  I553 :1;
    U  I554 :1;
    U  I555 :1;
    U  I556 :1;
    U  I557 :1;
    U  I558 :1;
    U  I559 :1;
    U  I560 :1;
    U  I561 :1;
    U  I562 :4;
    U  I563 :1;
    U  I564 :1;
    U  I565 :1;
    U  I566 :1;
    U  I567 :1;
    U  I568 :1;
    U  I569 :1;
    U  I570 :1;
    U  I571 :2;
    U  I572 :1;
    U  I573 :2;
    U  I574 :1;
    U  I575 :1;
    U  I341 :4;
    U  I576;
    TypeData  * I577;
    U  I578;
    U  I579;
    U  I580 :1;
    U  I581 :1;
    U  I582 :1;
    U  I583 :1;
    U  I584 :2;
    U  I585 :2;
    U  I586 :1;
    U  I587 :1;
    U  I588 :1;
    U  I589 :1;
    U  I590 :1;
    U  I591 :1;
    U  I592 :1;
    U  I593 :1;
    U  I594 :16;
};
typedef enum {
    QIRDModuleC = 1,
    QIRDSVPackageC = 2,
    QIRDSpiceModuleC = 3
} QIRDModuleType;
typedef struct {
    U  I750 :1;
    U  I751 :1;
    U  I752 :1;
    U  I753 :1;
    U  I754 :1;
    U  I755 :1;
    U  I756 :1;
    U  I757 :1;
    U  I758 :1;
    U  I759 :1;
    U  I760 :1;
    U  I761 :1;
    U  I762 :1;
    U  I763 :1;
    U  I764 :1;
    U  I765 :1;
    U  I766 :1;
    U  I767 :1;
    QIRDModuleType  I768 :2;
    U  I769 :1;
    U  I770 :1;
    U  I771 :1;
    U  I772 :1;
    U  I773 :1;
    U  I774 :1;
    U  I775 :1;
    U  I776 :1;
    U  I777 :1;
    U  I778 :1;
    U  I779 :1;
    U  I780 :1;
    U  I781 :1;
    U  I782 :1;
    U  I783 :1;
    U  I784 :1;
} BitFlags;
struct qird {
    US  I4;
    US  I5;
    U  I6;
    U  I7;
    char * I8;
    char * I9;
    U  * I10;
    char * I11;
    char * I12;
    U  I13;
    U  I14;
    struct vcd_rt * I15;
    U  I17;
    struct _vcdOffset_rt * I18;
    UP  * I20;
    U  I21;
    UP  * I22;
    U  I23;
    U  I24;
    U  I25;
    U  * I26;
    U  * I27;
    void * I28;
    void * I29;
    U  I30;
    int I31;
    UP  I32;
    U  I33;
    U  I34;
    U  I35;
    UP  I36;
    U  * I37;
    BitFlags  I38;
    U  I39;
    U  I40;
    U  I41;
    U  I42;
    U  I43;
    U  * I44;
    U  I45;
    U  * I46;
    U  I47;
    U  I48;
    U  I49;
    U  I50;
    U  I51;
    U  I52;
    U  I53;
    U  * I54;
    U  * I55;
    U  I56;
    U  I57;
    U  * I58;
    U  I59;
    U  * I60;
    U  I61;
    U  I62;
    U  I63;
    U  I64;
    U  * I65;
    U  I66;
    U  * I67;
    U  I68;
    U  I69;
    U  I70;
    U  I71;
    U  I72;
    U  I73;
    U  * I74;
    char * I75;
    U  I76;
    U  I77;
    U  I78;
    U  I79;
    U  I80;
    U  * I81;
    U  I82;
    U  I83;
    UP  * I84;
    U  I85;
    U  I86;
    UP  * I87;
    U  I88;
    U  I89;
    U  I90;
    U  I91;
    U  I92;
    U  I93;
    U  * I94;
    U  I95;
    U  I96;
    U  * I97;
    U  * I98;
    U  * I99;
    U  * I100;
    U  * I101;
    U  I102;
    U  I103;
    struct taskInfo * I104;
    U  I106;
    U  I107;
    int * I108;
    UP  * I109;
    U  * I110;
    U  I111;
    U  I112;
    U  I113;
    U  I114;
    U  I115;
    struct qrefer * I116;
    U  * I118;
    unsigned * I119;
    void * I120;
    U  I121;
    U  I122;
    struct classStaticReferData * I123;
    U  I125;
    U  I126;
    U  I127;
    U  * I128;
    U  I129;
    U  * I130;
    U  I131;
    U  I132;
    U  I133;
    U  * I134;
    U  I135;
    U  * I136;
    U  I137;
    U  I138;
    U  * I139;
    U  I140;
    U  I141;
    U  * I142;
    U  * I143;
    U  * I144;
    U  I145;
    U  I146;
    U  I147;
    U  I148;
    U  I149;
    struct qrefee * I150;
    U  * I152;
    U  I153;
    struct qdefrefee * I154;
    U  * I156;
    int (* I157)(void);
    char * I158;
    U  I159;
    U  I160;
    void * I161;
    void * I162;
    NumLibs_t  I163;
    char * I164;
    U  * I165;
    U  I166;
    U  I167;
    U  I168;
    U  I169;
    U  I170;
    U  * I171;
    U  * I172;
    int I173;
    struct clock_load * I174;
    int I189;
    struct clock_data * I190;
    int I206;
    struct clock_hiconn * I207;
    U  I211;
    int I212;
    U  I213;
    int I214;
    U  * I215;
    U  * I216;
    U  I217;
    void * I218;
    U  I219;
    U  I220;
    UP  * I221;
    void * I222;
    U  I223;
    UP  * I224;
    U  * I225;
    int (* I226)(void);
    U  * I227;
    UP  * I228;
    U  * I229;
    U  I230 :1;
    U  I231 :31;
    U  I232;
    U  I233;
    UP  * I234;
    U  * I235;
    U  I236 :1;
    U  I237 :1;
    U  I238 :1;
    U  I239 :1;
    U  I240 :28;
    U  I241;
    U  I242;
    U  I243;
    U  I244 :31;
    U  I245 :1;
    UP  * I246;
    UP  * I247;
    U  * I248;
    U  * I249;
    U  * I250;
    UP  * I251;
    UP  * I252;
    UP  * I253;
    U  * I254;
    UP  * I255;
    UP  * I256;
    UP  * I257;
    char * I258;
    U  I259;
    U  I260;
    U  I261;
    UP  * I262;
    UP  * I263;
    UP  * I264;
    UP  * I265;
    UP  * I266;
    UP  * I267;
    UP  * I268;
    UP  * I269;
    UP  * I270;
    UP  * I271;
    UP  * I272;
    UP  * I273;
    UP  * I274;
    U  I275;
    U  I276;
    U  I277;
    U  I278;
    U  I279;
    U  I280;
    U  I281;
    U  I282;
    char * I283;
    U  * I284;
    U  I285;
    U  I286;
    U  I287;
    UP  * I288;
    UP  * I289;
    UP  * I290;
    UP  * I291;
    struct daidirInfo * I292;
    struct vcs_tftable * I294;
    U  I296;
    UP  * I297;
    UP  * I298;
    U  I299;
    U  I300;
    U  I301;
    UP  * I302;
    U  * I303;
    struct qird_hil_data * I304;
    UP  (* I306)(void);
    UP  (* I307)(void);
    UP  (* I308)(void);
    UP  (* I309)(void);
    UP  (* I310)(void);
    int * I311;
    int (* I312)(void);
    char * I313;
    UP  * I314;
    UP  * I315;
    UP  (* I316)(void);
    int (* I317)(void);
    int * I318;
    int (* I319)(void);
    int * I320;
    char * I321;
    U  * I322;
    U  * I323;
    U  * I324;
    U  * I325;
    void * I326;
    void * I327;
    U  I328;
    U  I329;
    U  I330;
    U  I331;
    U  I332;
    U  I333;
    UP  * I334;
    U  * I335;
    U  * I336;
    U  I337 :15;
    U  I338 :14;
    U  I339 :1;
    U  I340 :1;
    U  I341 :1;
    U  I342 :3;
    U  I343 :1;
    U  I344 :1;
    U  I345 :17;
    U  I346 :3;
    U  I347 :5;
    U  I348 :2;
    U  I349 :1;
    U  I350 :31;
    struct scope * I351;
    U  I353;
    U  I354;
    U  I355;
    U  * I356;
    U  * I357;
    U  * I358;
    U  I359;
    U  I360;
    U  I361;
    struct pcbt * I362;
    U  I372;
    U  I373;
    U  I374;
    U  I375;
    void * I376;
    void * I377;
    void * I378;
    int I379;
    U  * I380;
    U  I381;
    U  I382;
    U  I383;
    U  I384;
    U  I385;
    U  I386;
    U  I387;
    void * I388;
    UP  * I389;
    U  I390;
    U  I391;
    void * I392;
    U  I393;
    void * I394;
    U  I395;
    void * I396;
    U  I397;
    int (* I398)(void);
    int (* I399)(void);
    void * I400;
    void * I401;
    void * I402;
    U  I403;
    U  I404;
    U  I405;
    U  I406;
    U  I407;
    U  I408;
    char * I409;
    U  I410;
    U  * I411;
    U  I412;
    U  * I413;
    U  I414;
    U  I415;
    U  I416;
    U  I417;
    U  I418;
    U  I419;
    U  * I420;
    U  I421;
    U  I422;
    U  * I423;
    U  I424;
    U  * I425;
    char * I426;
    U  I427;
    U  I428;
    U  I429;
    U  I430;
    U  * I431;
    U  * I432;
    U  I433;
    U  * I434;
    U  * I435;
    U  I436;
    U  I437;
    U  I438;
    U  I439;
    struct cosim_info * I440;
    U  I442;
    U  * I443;
    U  I444;
    U  I445;
    U  * I446;
    U  I447;
    U  * I448;
    U  I449;
    U  I450;
    U  * I451;
    U  I452;
    U  * I453;
    U  I454;
    U  * I455;
    U  I456;
    U  I457;
    U  I458;
    U  I459;
    U  I460;
    U  I461;
    U  I462;
    U  I463;
    U  I464;
    U  * I465;
    U  * I466;
    void (* I467)(void);
    U  * I468;
    UP  * I469;
    struct mhdl_outInfo * I470;
    UP  * I472;
    U  I473;
    UP  * I474;
    U  I475;
    void * I476;
    U  * I477;
    void * I478;
    char * I479;
    int (* I480)(void);
    U  * I481;
    char * I482;
    char * I483;
    U  I484;
    U  * I485;
    char * I486;
    U  I487;
    struct regInitInfo * I488;
    UP  * I490;
    U  * I491;
    char * I492;
    U  I493;
    U  I494;
    U  I495;
    U  I496;
    U  I497;
    U  I498;
    U  I499;
    U  I500;
    U  * I501;
    U  * I502;
    U  I503;
    U  I504;
    U  I505;
    U  I506;
    UP  * I507;
    U  I508;
    UP  * I509;
    U  I510;
    U  I511;
    U  I512;
    U  * I513;
    U  I514;
    U  I515;
    U  I516;
    U  * I517;
    U  * I518;
    UP  * I519;
    UP  * I520;
    void * I521;
    UP  I522;
    void * I523;
    void * I524;
    void * I525;
    void * I526;
    void * I527;
    UP  I528;
    U  * I529;
    U  * I530;
    void * I531;
    U  I532 :1;
    U  I533 :31;
    U  I534;
    U  I535;
    U  I536;
    int I537;
    void * I538;
    UP  * I539;
    U  * I540;
    U  I541;
    char * I542;
    U  * I543;
    U  * I544;
    char * I545;
    int * I546;
    UP  * I547;
    struct etype * I548;
    U  I595;
    U  I596;
    U  I597;
    U  * I598;
    void * I599;
    U  I600;
    U  I601;
    void * I602;
    U  I603;
    U  I604;
    U  * I605;
    U  I606;
    U  * I607;
    U  I608;
    U  I609;
    U  * I610;
};
typedef struct pcbt {
    U  * I364;
    UP  I365;
    U  I366;
    U  I367;
    U  I368;
    U  I369;
    U  I370;
    U  I371;
} PCBT;
struct iptmpl {
    QIRD  * I658;
    struct vcs_globals_t * I659;
    void * I661;
    UP  I662;
    UP  I663;
    struct iptmpl * I654[2];
};
typedef unsigned long long FileOffset;
typedef struct _hsimPeriodL {
    char  I826[256];
    struct _hsimPeriodL * I789;
} HsimPeriodL;
typedef struct {
    U   I828[2];
    U  I829 :1;
    U  I830 :1;
    U  I831 :8;
    U  I832 :8;
    U  I833 :8;
    U  I834 :4;
    unsigned long long I835;
    unsigned long long I836;
    unsigned long long I837;
    unsigned long long I838;
    unsigned long long I839;
    U  I840;
    U  I841;
    U  I842;
    U  I843;
    HsimPeriodL  * I844;
    HsimPeriodL  * I845;
    U  I846;
} HsimSignalMonitor;
typedef struct {
    FlatNodeNum  I847;
    InstNum  I848;
    U  I797;
    scalar  I849;
    UB  I850;
    UB  I851;
    UB  I852;
    U  I853;
    U  I854;
    U  I855;
    U  I856;
    U  I857;
    HsimSignalMonitor  * I858;
    RmaTimeStamp64  I859;
    U  I860;
    RmaTimeStamp64  I861;
} HsimNodeRecord;
typedef struct {
    RP  I862;
    RP  I654;
} RmaIbfIp;
typedef struct {
    RP  I862;
    RP  pcode;
} RmaIbfPcode;
typedef struct {
    RmaEblk  I651;
} RmaEvTriggeredOrSyncLoadCg;
typedef struct {
    RmaEblk  I651;
    RP  I863;
} RmaAnySchedSampleSCg;
typedef struct {
    RmaEblk  I651;
    RP  I864;
    RP  I863;
    vec32  I865;
} RmaAnySchedVCg;
typedef struct {
    RmaEblk  I651;
    RP  I864;
    RP  I863;
    vec32   I689[1];
} RmaAnySchedWCg;
typedef struct {
    RmaEblk  I651;
    RP  I864;
    RP  I863;
    scalar   I866[1];
} RmaAnySchedECg;
typedef struct {
    RP  I867;
} RmaRootCbkCg;
typedef struct {
    RP  I868;
} RmaRootVcdCg;
typedef struct {
    RP  I869;
} RmaRootForceCbkCg;
typedef struct {
    RmaEblk  I651;
    RP  I870;
} RmaForceCbkJmpCg;
typedef struct {
    U  I5;
    U  I647 :30;
    U  I871 :1;
    U  I872 :1;
    vec32  I721;
    U  I873;
    RP  I874;
    RP  I875;
} RmaForceSelectorV;
typedef struct {
    U  I5;
    RmaIbfPcode  I881;
} RmaNetTypeDriverGate;
typedef struct {
    U  I5;
    U  I614;
    RmaIbfPcode   I881[1];
} RmaNetTypeScatterGate;
typedef struct {
    U  I5;
    RmaIbfPcode  I881;
} RmaNetTypeGatherGate;
typedef struct {
    RmaIbfPcode  I882;
    U  I883 :3;
    U  I884 :1;
    U  I885 :1;
} RmaNbaGateOfn;
typedef struct {
    NBS  I886;
    RmaIbfPcode  I882;
} RmaNbaGate1;
typedef struct {
    RP  ptable;
    RP  pfn;
    RP  pcode;
} Rma1InputGateFaninCgS;
typedef struct {
    U  I5;
    U  iinput;
    RP  I889;
} RmaCondOptLoad;
typedef struct {
    U  I5;
    U  iinput;
    RP  I889;
} RmaMacroStateUpdate;
typedef struct {
    U  I5;
    U  state;
    U  I890;
    U  * I891;
} RmaMacroState;
typedef struct {
    U  iinput;
    RP  I892;
} RmaMultiInputLogicGateCg;
typedef struct {
    U  iinput;
    RP  ptable;
    RP  I892;
} RmaSeqPrimEdgeInputCg;
typedef struct {
    RmaEblk  I651;
    RP  pcode;
} RmaSched0GateCg;
typedef struct {
    RmaEblk  I651;
    RP  pcode;
    RP  pfn;
} RmaUdpDeltaGateCg;
typedef struct {
    RmaEblk  I651;
    RP  pcode;
    RP  pfn;
    scalar  I893;
} RmaSchedDeltaGateCg;
typedef struct {
    UB  I894;
    RP  I895;
    RP  I896;
} RmaPropNodeSeqLhsSCg;
typedef struct {
    RmaEblk  I651;
    RP  pcode;
    U  I797;
    U   I640[1];
} RmaBitEdgeEblk;
typedef struct {
    U  I5;
    RP  I720;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaGateDelay;
typedef struct {
    U  I5;
    union {
        RP  I1024;
        RP  I1276;
        RP  I1287;
    } I694;
    RmaIbfPcode  I882;
} RmaMPDelay;
typedef struct {
    U  I5;
    RmaPulse  I897;
    RmaIbfPcode  I882;
} RmaMPPulseHybridDelay;
typedef struct {
    U  I5;
    RmaIbfPcode  I882;
    RmaMps  I898;
} RmaMPHybridDelay;
typedef struct {
    U  I5;
    U  I899;
    RmaIbfPcode  I882;
    RmaEblk  I679;
} RmaMPHybridDelayPacked;
typedef struct {
    U  I5;
    RmaIbfPcode  I882;
    RmaMpspNewCsdf  I900;
} RmaMPPulseDelay;
typedef struct {
    U  I5;
    RmaMpsp  I900;
    RmaIbfPcode  I882;
} RmaMPPulseOptHybridDelay;
typedef struct {
    U  I5;
    U  I719;
    RmaTransEventHdr  I803;
    RP  I716;
    RmaIbfPcode  I882;
} RmaNtcTransDelay;
typedef struct {
    U  I5;
    U  I719;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaNtcTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaNtcTransZeroDelay;
typedef struct {
    U  I5;
    U  I901;
    U  I902;
    RmaTransEventHdr  I803;
    RP  I716;
    RmaIbfPcode  I882;
} RmaNtcTransDelayRF;
typedef struct {
    U  I5;
    U  I901;
    U  I902;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaNtcTransMpwOptDelayRF;
typedef struct {
    U  I5;
    RP  I903;
    RmaTransEventHdr  I803;
    RP  I716;
    RmaIbfPcode  I882;
} RmaICTransDelay;
typedef struct {
    U  I5;
    RP  I903;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaICTransMpwOptDelay;
typedef struct {
    U  I5;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaICTransZeroDelay;
typedef struct {
    U  I5;
    RP  I720;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaICSimpleDelay;
typedef struct {
    U  I5;
    union {
        RP  psimple;
        RP  I1276;
        RP  I1287;
    } I694;
    RmaIbfPcode  I882;
} RmaICDelay;
typedef struct {
    U  I5;
    RP  I720;
    RmaEblk  I651;
    RmaIbfPcode  I882;
} RmaPortDelay;
typedef struct TableAssign_ {
    struct TableAssign_ * I789;
    struct TableAssign_ * I710;
    U  I5;
    U  iinput;
    RP  ptable;
    RP  I892;
} TableAssign;
typedef struct {
    U  I5;
    RP  I710;
    RP  I905;
} RmaTableAssignList;
typedef struct {
    RP  I906;
} RmaWakeupListCg;
typedef struct {
    U  I907;
    U  I908;
    RmaTimeStamp   I909[1];
} RmaTsArray;
typedef struct {
    U  iinput;
    RP  I910;
} RmaConditionsMdb;
typedef struct {
    RP  I789;
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
} RmaTcCoreSimple;
typedef struct {
    RP  I789;
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I922;
} RmaTcCoreConditional;
typedef struct {
    RP  I789;
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I922;
    RP  I923;
} RmaTcCoreConditionalOpt;
typedef struct {
    RP  I789;
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I923;
    RP  I924;
    U  I925;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtc;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
} RmaTcCoreSimpleNoList;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I927;
} RmaTcCoreSimpleNoListMdb;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I922;
} RmaTcCoreConditionalNoList;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I922;
    RP  I923;
} RmaTcCoreConditionalOptNoList;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I923;
    RP  I924;
    U  I925;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoList;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I923;
    RP  I924;
    RP  I927;
    U  I925;
    RmaConditionsMdb   arr[1];
} RmaTcCoreConditionalMtcNoListMdb;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    RP  I922;
    RP  I927;
} RmaTcCoreConditionalNoListMdb;
typedef struct {
    RP  I911;
    RP  I646;
    U  I912;
    scalar  I913;
    scalar  I914;
    US  I915 :1;
    US  I916 :1;
    US  I917 :1;
    US  I918 :1;
    US  I919 :1;
    US  I920 :1;
    US  I921 :5;
    U  I928;
    RP  I929;
    RP  I930;
    RP  I922;
    RP  I931;
    RP  I932;
    RmaTimeStamp  I933;
} RmaTcCoreNochange;
typedef struct {
    RP  I934;
    RP  I789;
} RmaTcCoreNochangeList;
typedef struct {
    RP  I910;
    RmaTimeStamp  I935;
    scalar  I936;
} RmaConditionalTSLoadNoList;
typedef struct {
    RP  I789;
    RP  I910;
    RmaTimeStamp  I935;
    scalar  I936;
} RmaConditionalTSLoad;
typedef struct {
    RmaTimeStamp  I935;
    scalar  I936;
    US  I913;
    RP  I923;
} RmaConditionalTSLoadOptNoList;
typedef struct {
    RP  I789;
    RmaTimeStamp  I935;
    scalar  I936;
    US  I913;
    RP  I923;
} RmaConditionalTSLoadOpt;
typedef struct {
    RP  I923;
    RP  I937;
    U  I925;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoList;
typedef struct {
    RP  I927;
    RP  I923;
    RP  I937;
    U  I925;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtcNoListMdb;
typedef struct {
    RP  I789;
    RP  I923;
    RP  I937;
    U  I925;
    RmaConditionsMdb   arr[1];
} RmaConditionalTSLoadMtc;
typedef struct {
    U  I938;
    U  I939;
    FlatNodeNum  I940;
    U  I797;
    U  I941;
    U  I942;
    RmaIbfPcode  I882;
    union {
        scalar  I943;
        vec32  I944;
        scalar  * I945;
        vec32  * I946;
    } val;
} RmaScanSwitchData;
typedef struct {
    RP  I789;
    RP  I710;
    RP  I947;
} RmaDoublyLinkedListElem;
typedef struct {
    RP  I948;
    U  I949 :1;
    U  I950 :1;
    U  I951 :1;
    U  I952 :4;
    U  I341 :25;
    U  I953;
} RmaSwitchGateInCbkListInfo;
typedef struct {
    union {
        RmaDoublyLinkedListElem  I1317;
        RmaSwitchGateInCbkListInfo  I2;
    } I625;
    RmaIbfPcode  I882;
} RmaSwitchGate;
typedef struct RmaNonEdgeLoadData1_ {
    US  I954;
    scalar  val;
    scalar  I176 :4;
    scalar  I955 :1;
    scalar  I956 :1;
    scalar  I957 :1;
    scalar  I958 :1;
    RP  I724;
    RP  I959;
    RP  I940;
    RP  I960;
    RP  I961;
} RmaNonEdgeLoadData1;
typedef struct RmaNonEdgeLoadHdr1_ {
    UB  I962;
    UB  I963;
    RmaNonEdgeLoadData1  * I964;
    RmaNonEdgeLoadData1  * I710;
} RmaNonEdgeLoadHdr1;
typedef struct RmaChildClockProp_ {
    RP  I724;
    RP  I965;
    RP  I940;
    RP  pcode;
    scalar  val;
} RmaChildClockProp;
typedef struct RmaChildClockPropList1_ {
    RmaChildClockProp  * I964;
    RmaChildClockProp  * I710;
} RmaChildClockPropList1;
typedef struct {
    U  I5;
    U  I966;
} RmaHDLCosimDUTGate;
struct clock_load {
    U  I176 :5;
    U  I177 :12;
    U  I178 :1;
    U  I179 :2;
    U  I180 :1;
    U  I181 :1;
    U  I182 :1;
    U  I183 :9;
    U  I184;
    U  I185;
    void (* pfn)(void * I187, char val);
};
typedef struct clock_data {
    U  I192 :1;
    U  I193 :1;
    U  I194 :1;
    U  I195 :1;
    U  I176 :5;
    U  I177 :12;
    U  I196 :6;
    U  I197 :1;
    U  I179 :2;
    U  I180 :1;
    U  I183 :1;
    U  I198;
    U  I199;
    U  I200;
    U  I184;
    U  I201;
    U  I202;
    U  I203;
    U  I204;
    U  I205;
} HdbsClockData;
struct clock_hiconn {
    U  I209;
    U  I210;
    U  I184;
    U  I179;
};
typedef struct _RmaDaiCg {
    RP  I967;
    RP  I968;
    U  I969;
} RmaDaiCg;
typedef union _RmaCbkMemOptUnion {
    RP  I967;
    RP  I970;
    RP  I971;
} RmaCbkMemOptUnion;
typedef struct _RmaDaiOptCg {
    RmaCbkMemOptUnion  I972;
} RmaDaiOptCg;
struct futq {
    struct futq * I664;
    struct futq * I666;
    RmaEblk  * I667;
    RmaEblk  * I668;
    U  I656;
};
struct sched_table {
    struct futq * I669;
    struct futq I670;
    struct hash_bucket * I671;
};
struct dummyq_struct {
    clock_struct  I976;
    EBLK  * I977;
    EBLK  * I978;
    struct futq * I979;
    struct futq * I980;
    struct sched_table * I981;
    struct millenium * I983;
    EBLK  * I985;
    EBLK  * I986;
    EBLK  * I987;
    EBLK  * I988;
    EBLK  * I989;
    EBLK  * I990;
    EBLK  * I991;
    EBLK  * I992;
    EBLK  * I993;
    EBLK  * I994;
    EBLK  * I995;
    EBLK  * I996;
    EBLK  * I997;
    EBLK  * I998;
    EBLK  * I999;
    EBLK  * I1000;
    EBLK  * I1001;
    EBLK  * I1002;
    MPS  * I1003;
};
typedef void (* FP)(void *  , scalar   );
typedef void (* FP1)(void *  );
typedef void (* FPRAP)(void *  , vec32  *  , U   );
typedef U  (* FPU1)(void *  );
typedef void (* FPV)(void *  , UB  *  );
typedef void (* FPVU)(void *  , UB  *  , U   );
typedef void (* FPLSEL)(void *  , scalar   , U   );
typedef void (* FPLSELV)(void *  , vec32  *  , U   , U   );
typedef void (* FPFPV)(UB  *  , UB  *  , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPFA)(UB  *  , UB  *  , U   , U   , U   , U   , U   , U   , UB  *  , U   );
typedef void (* FPRPV)(UB  *  , U   , U   , U   );
typedef void (* FPEVCDLSEL)(void *  , scalar   , U   , UB  *  );
typedef void (* FPEVCDLSELV)(void *  , vec32  *  , U   , U   , UB  *  );
typedef void (* FPNTYPE_L)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_H)(void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_LPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , U   );
typedef void (* FPNTYPE_HPAP)(void *  , void *  , void *  , U   , U   , UB  *  , UB  *  , UB  *  , UB  *  , U   );
typedef struct _lqueue {
    EBLK  * I652;
    EBLK  * I1004;
    int I1005;
    struct _lqueue * I683;
} Queue;
typedef struct {
    EBLK  I1007;
    U  I1008;
    union {
        void * pHeap;
        Queue  * pList;
    } I625;
    Queue   I1009[1];
} Qhdr;
extern UB   Xvalchg[];
extern UB   X4val[];
extern UB   X3val[];
extern UB   X2val[];
extern UB   XcvtstrTR[];
extern UB   Xcvtstr[];
extern UB   Xbuf[];
extern UB   Xbitnot[];
extern UB   Xwor[];
extern UB   Xwand[];
extern U   Xbitnot4val[];
extern UB   globalTable1Input[];
extern unsigned long long vcs_clocks;
extern UB   Xunion[];
extern U  fRTFrcRelCbk;
extern FP  txpFnPtr;
extern FP   rmaFunctionArray[];
extern FP   rmaFunctionRtlArray[];
extern FP   rmaFunctionLRArray[];
extern U  rmaFunctionCount;
extern U  rmaFunctionLRCount;
extern U  rmaFunctionLRDummyCount;
extern UP  rmaFunctionDummyEndPtr;
extern UB  dummyScalar;
extern UB  fScalarIsForced;
extern UB  fScalarIsReleased;
extern U  fNotimingchecks;
extern RP  * iparr;
extern FP1  * rmaPostAnySchedFnPtr;
extern FP1  * rmaPostAnySchedFnSamplePtr;
extern FP1  * rmaPostAnySchedVFnPtr;
extern FP1  * rmaPostAnySchedWFnPtr;
extern FP1  * rmaPostAnySchedEFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusFnPtr;
extern FP1  * rmaPostSchedUpdateClockStatusNonCongruentFnPtr;
extern FP1  * rmaPostSchedUpdateEvTrigFnPtr;
extern FP1  * rmaSched0UpdateEvTrigFnPtr;
extern FP1  * rmaPostSchedRecoveryResetDbsFnPtr;
extern U  fGblDataOrTime0Prop;
extern UB   rmaEdgeStatusValArr[];
extern FP1  * propForceCbkSPostSchedCgFnPtr;
extern FP1  * propForceCbkMemoptSPostSchedCgFnPtr;
extern UB  * ptableGbl;
extern Qhdr  * lvlQueue;
extern U  mhdl_delta_count;
extern U  ignoreSchedForScanOpt;
extern U  fignoreSchedForDeadComboCloud;
extern int fZeroUser;
extern U  fEveBusPullVal;
extern U  fEveBusPullFlag;
extern UB  fNettypeIsForced;
extern UB  fNettypeIsReleased;
extern EBLK  * peblkFutQ1Head;
extern EBLK  * peblkFutQ1Tail;
extern US  * edgeActionT;
extern unsigned long long * derivedClk;
extern U  fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U  fLoopReportRT;


extern void *mempcpy(void* s1, void* s2, unsigned n);
extern UB* rmaEvalDelays(UB* pcode, scalar val);
extern UB* rmaEvalDelaysV(UB* pcode, vec32* pval);
extern void rmaPopTransEvent(UB* pcode);
extern void rmaSetupFuncArray(UP* ra, U c, U w);
extern void rmaSetupRTLoopReportPtrs(UP* funcs, UP* rtlFuncs, U cnt, U cntDummy, UP end);
extern void SinitHsimPats(void);
extern void VVrpDaicb(void* ip, U nIndex);
extern int SDaicb(void *ip, U nIndex);
extern void SDaicbForHsimNoFlagScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlagStrengthScalar(void* pDaiCb, unsigned char value);
extern void SDaicbForHsimNoFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlag2(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimWithFlag(void* pRmaDaiCg, unsigned char value);
extern void SDaicbForHsimNoFlagFrcRel(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimNoFlagFrcRel2(void* pRmaDaiCg, unsigned char reason, int msb, int lsb, int ndx);
extern void VcsHsimValueChangeCB(void* pRmaDaiCg, void* pValue, unsigned int valueFormat);
extern U isNonDesignNodeCallbackList(void* pRmaDaiCg);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagScalar(void* pDaiCb, unsigned char value, unsigned char isStrength);
extern void VVrpNonEventNonRegdScalarForHsimOptCbkMemopt(void* ip, U nIndex);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptWithFlagDynElabScalar(U* mem, unsigned char value, unsigned char isStrength);
extern void SDaicbForHsimCbkMemOptNoFlagDynElabFrcRel(U* mem, unsigned char reason, int msb, int lsb, int ndx);
extern void SDaicbForHsimCbkMemOptNoFlagFrcRel(void* pDaiCb, unsigned char reason, int msb, int lsb, int ndx);
extern void hsimDispatchCbkMemOptForVcd(RP p, U val);
extern void* hsimGetCbkMemOptCallback(RP p);
extern void hsimDispatchCbkMemOptNoDynElabS(RP* p, U val, U isStrength);
extern void* hsimGetCbkPtrNoDynElab(RP p);
extern void hsimDispatchCbkMemOptDynElabS(U** pvcdarr, U** pcbkarr, U val, U isScalForced, U isScalReleased, U isStrength);
extern void hsimDispatchCbkMemOptNoDynElabVector(RP* /*RmaDaiOptCg* */p, void* pval, U /*RmaValueType*/ vt, U cbits);
extern void copyAndPropRootCbkCgS(RmaRootCbkCg* pRootCbk, scalar val);
extern void copyAndPropRootCbkCgV(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgW(RmaRootCbkCg* rootCbk, vec32* pval);
extern void copyAndPropRootCbkCgE(RmaRootCbkCg* rootCbk, scalar* pval);
extern void dumpRootVcdCg(RmaRootVcdCg* pRootVcd, scalar val);
extern void Wsvvar_callback_non_dynamic1(RP* ptr, int);
extern void rmaExecEvSyncList(RP plist);
extern void Wsvvar_callback_virt_intf(RP* ptr);
extern void Wsvvar_callback_hsim_var(RP* ptr);
extern void checkAndConvertVec32To2State(vec32* value, vec32* svalue, U cbits, U* pforcedBits);
extern unsigned int fGblDataOrTime0Prop;
extern void SchedSemiLerMP1(UB* pmps, U partId);
extern void SchedSemiLerMPO(UB* pmpso, U partId);
extern void rmaDummyPropagate(void);
extern RP rmaTestCg(RP pcode, U vt, UB* value);
extern void hsUpdateModpathTimeStamp(UB* pmps);
extern void doMpd32One(UB* pmps);
extern void SchedSemiLerMP(UB* ppulse, U partId);
extern EBLK *peblkFutQ1Head;
extern EBLK *peblkFutQ1Tail;
extern void scheduleuna(UB *e, U t);
extern void scheduleuna_mp(EBLK *e, unsigned t);
extern void schedule(UB *e, U t);
extern void sched_hsopt(struct dummyq_struct * pQ, EBLK *e, U t);
extern void sched_millenium(struct dummyq_struct * pQ, void *e, U thigh, U t);
extern void schedule_1(EBLK *e);
extern void sched0(UB *e);
extern void sched0Raptor(UB *e);
extern void sched0lq(UB *e);
extern void sched0lqnc(EBLK *e);
extern void sched0una(UB *e);
extern void sched0una_th(struct dummyq_struct *pq, UB *e);
extern void hsopt_sched0u_th(struct dummyq_struct *pq, UB *e);
extern void scheduleuna_mp_th(struct dummyq_struct *pq, EBLK *e, unsigned t);
extern void schedal(UB *e);
extern void sched0_th(struct dummyq_struct * pQ, EBLK *e);
extern void sched0u(UB *e);
extern void sched0u_th(struct dummyq_struct *pq, UB *e);
extern void sched0_hsim_front_th(struct dummyq_struct * pQ, UB *e);
extern void sched0_hsim_frontlq_th(struct dummyq_struct * pQ, UB *e);
extern void sched0lq_th(struct dummyq_struct * pQ, UB *e);
extern void schedal_th(struct dummyq_struct * pQ, UB *e);
extern void scheduleuna_th(struct dummyq_struct * pQ, void *e, U t);
extern void schedule_th(struct dummyq_struct * pQ, UB *e, U t);
extern void schedule_1_th(struct dummyq_struct * pQ, EBLK *peblk);
extern void SetupLER_th(struct dummyq_struct * pQ, UB *e);
extern void SchedSemiLer_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXP_th(struct dummyq_struct * pQ, EBLK *e);
extern void SchedSemiLerTXPFreeVar_th(struct dummyq_struct * pQ, EBLK *e);
extern U getVcdFlags(UB *ip);
extern void VVrpNonEventNonRegdScalarForHsimOpt(void* ip, U nIndex);
extern void VVrpNonEventNonRegdScalarForHsimOpt2(void* ip, U nIndex);
extern void SchedSemiLerTBReactiveRegion(struct eblk* peblk);
extern void SchedSemiLerTBReactiveRegion_th(struct eblk* peblk, U partId);
extern void SchedSemiLerTr(UB* peblk, U partId);
extern void SchedSemiLerNBA(UB* peblk, U partId);
extern void NBA_Semiler(void *ip, void *pNBS);
extern void sched0sd_hsim(UB* peblk);
extern void appendNtcEvent(UB* phdr, scalar s, U schedDelta);
extern void schedRetainHsim(MPS* pMPS, scalar sv, scalar pv);
extern void updateRetainHsim(MPS* pMPS,scalar sv, scalar pv);
extern void hsimRegisterEdge(void* sm,  scalar s);
extern U pvcsGetPartId();
extern void HsimPVCSPartIdCheck(U instNo);
extern void debug_func(U partId, struct dummyq_struct* pQ, EBLK* EblkLastEventx); 
extern struct dummyq_struct* pvcsGetQ(U thid);
extern EBLK* pvcsGetLastEventEblk(U thid);
extern void insertTransEvent(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, int re, UB* predd, U fpdd);
extern void insertNtcEventRF(RmaTransEventHdr* phdr, scalar s, scalar pv, scalar resval, U schedDelta, U* delays);
extern U doTimingViolation(RmaTimeStamp ts,RP* pdata, U fskew, U limit, U floaded, U fcondopt, RmaTimeStamp tsNochange);
extern void sched_gate_hsim(EBLK* peblk, unsigned t, RP* offset);
extern int getCurSchedRegion();
extern FP getRoutPtr(RP, U);
extern U rmaChangeCheckAndUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern void rmaUpdateE(scalar* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaChangeCheckAndUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaLhsPartSelUpdateE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaUpdateWithForceSelectorE(scalar* pvalDst, scalar* pvalSrc, U cbits, U* pforceSelector);
extern void rmaUpdateWFromE(vec32* pvalDst, scalar* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckE(scalar* pvalDst, scalar* pvalSrc, U index, U width);
extern void rmaLhsPartSelWFromE(vec32* pvalDst, scalar* pvalSrc, U index,U width);
extern U rmaChangeCheckAndUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateW(vec32* pvalDst, vec32* pvalSrc, U cbits);
extern void rmaUpdateEFromW(scalar* pvalDst, vec32* pvalSrc, U cbits);
extern U rmaLhsPartSelWithChangeCheckW(vec32* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern U rmaLhsPartSelWithChangeCheckEFromW(scalar* pvalDst, vec32* pvalSrc, U index,U width);
extern void rmaLhsPartSelUpdateW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void rmaEvalWunionW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWorW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalWandW(vec32* dst, vec32* src, U cbits, U count);
extern void rmaEvalUnionE(scalar* dst, scalar* src, U cbits, U count, RP ptable);
typedef U RmaCgFunctionType;
extern RmaIbfPcode* rmaEvalPartSelectsW(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWLe32(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsWToE(vec32* pvec32, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern RmaIbfPcode* rmaEvalPartSelectsEToE(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce, UB* pevcdStatus);
extern RmaIbfPcode* rmaEvalPartSelectsEToW(scalar* pv, U startIndex, U onWidth, U offWidth, U count, RmaIbfPcode* pibfPcode, U fnonRootForce);
extern U rmaEvalBitPosEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U VcsForceVecVCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U/*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecVCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecWCg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U/*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType, UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecWCg(UB* pcode, UB* pvDst, U fullcbits, U ibeginDst, U width, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecECg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsForceVecACg(UB* pcode, UB* pval, UB* pvDst, UB* pvCur, U fullcbits, U ibeginSrc, U ibeginDst, U width, U /*RmaValueConvType*/ convtype, U /*RmaForceType*/ frcType,UB* prhs, UB* prhsDst, U frhs, U* pforcedbits, U fisRoot);
extern U VcsReleaseVecCg(UB* pcode, UB* pvDst, U ibeginDst, U width, U /*RmaValueType*/ type,U fisRoot, UB* prhsDst, U frhs, U* pforcedbits);
extern U VcsDriveBitsAndDoChangeCheckV(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckW(vec32* pvSel, vec32* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern U VcsDriveBitsAndDoChangeCheckE(scalar* pvSel, scalar* pvCur, U fullcbits, U* pforcedbits, U isRoot);
extern void cgvecDebug_Eblk(UB* pcode);
extern U rmaCmpW(vec32* pvalDst, vec32* pvalSrc, U index, U width);
extern void copyVec32ArrMask(vec32* pv1, vec32* pv2, U len, U* mask);
extern void* memcpy(void*, const void*, size_t);
extern int memcmp(const void*, const void*, size_t);
extern void propagateScanOptPathVal(EBLK *peblk);
extern UB* rmaProcessScanSwitches(UB* pcode, scalar val);
extern UB* rmaProcessScanSwitchesV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanoptDump(UB* pcode, scalar val);
extern UB* rmaProcessScanoptDumpV(UB* pcode, vec32 *pval);
extern UB* rmaProcessScanChainOptSeqPrims(UB* pcode, scalar val);
extern void rmaProcessPvcsCcn(UB* pcode, scalar val);
extern void rmaProcessPvcsCcnE(UB* pcode, scalar* val);
extern void rmaProcessPvcsCcnW(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnV(UB* pcode, vec32* val);
extern void rmaProcessPvcsCcnCompiledS(UB* pcode, U offset, scalar ibnval);
extern void rmaProcessPvcsCcnCompiledV(UB* pcode, U offset, vec32* pval);
extern void schedResetRecoveryDbs(U cedges, EBLK* peblkFirst);
extern UB* rmaEvalUnaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVOneFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpVLargeFanoutCount(UB* pcode, vec32* pval);
extern UB* rmaEvalAndOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalAndOpV(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVOneFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpVLargeFanoutCount(UB* pcode, vec32* value);
extern UB* rmaEvalOrOpV(UB* pcode, vec32* value);
extern UB* rmaEvalTernaryOpV(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalBinaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalTernaryOpW(UB* pcode, vec32* pval);
extern UB* rmaEvalUnaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalBinaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpE(UB* pcode, scalar* pv);
extern UB* rmaEvalTernaryOpS(UB* pcode, scalar val);
extern scalar rmaGetScalarFromWCg(vec32* pval, U index);
extern void rmaSetScalarInWCg(vec32* pval, U index, scalar s);
extern void rmaCountRaptorBits(void* pval, void* pvalPrev, U cbits, U vt);
extern void setHsimFunc(void* ip);
extern void unsetHsimFunc(void* ip);
extern UB* getEvcdStatusByFlagsE(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsV(vec32* pvec32, UB* pevcdTBDriverFlags, U cdrivers, UB* table, U cbits);
extern UB* getEvcdStatusByFlagsS(scalar* pscalar, UB* pevcdTBDriverFlags, U cdrivers, UB* table);
extern UB* getSingleDrvEvcdStatusS(UB value, U fTBDriver);
extern UB* getSingleDrvEvcdStatusE(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getSingleDrvEvcdStatusV(scalar* pscalars, U fTBDriver, U cbits);
extern UB* getEvcdStatusByDrvEvcdStatus(UB* pdrvevcdStatus, U cdrivers, UB* table, U cbits);
extern void evcdCallback(UP pcode, U cbits);
extern UB* getSavedEvcdStatus(void);
extern void saveEvcdStatus(UB*);
extern void mhdlMarkExport(void*, U);
extern void levelInsertQueue(int);
extern void VcsRciRtl(RP pcode);
extern U fLoopDetectMode;
extern int gFLoopDectCodeEna;
extern U fLoopReportRT;
extern void rtSched0LoopDectDumpProcess(void* e, void* rtn, void* PQ);
extern void pushHsimRtnCtxt(void* pcode);
extern void popHsimRtnCtxt();
extern EBLK* loopReportInlinedSched0Wrapper(EBLK *peblk);
extern void loopReportSched0Wrapper(EBLK *peblk, unsigned int sfType, unsigned int fTH, struct dummyq_struct* pq);
extern void loopReportSchedSemiLerWrapper(EBLK *peblk, int sfType);
extern void CallGraphPushNodeAndAddToGraph(UP flatNode, UP instNum, U dummy);
extern void CallGraphPopNode(void);
extern RP elabGetIpTpl(U in);
extern U rmaEvalBitBothEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQXW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0W(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval01EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval0XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval10EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEval1XEdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX1EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalX0EdgeW(vec32* pvalCurr, vec32* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitPosEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitNegEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitBothEdgeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ1E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitEdgeQ0E(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern U rmaEvalBitChangeE(scalar* pvalCurr, scalar* pvalPrev, U cbits, U* pedges);
extern void rmaScheduleNbaGate(RP pcode, scalar val);
extern void rmaEvaluateDynamicGateLoadsCg(RP p, scalar s);
extern void rmaEvaluateFusedWithDynamicGateLoadsCg(RP p, scalar s);
extern void rmaScheduleGatedClockEdgeLoad(UB* p, US* ea, U fNonEdgeLoad, UB* plist, scalar v);
extern void rmaRemoveNonEdgeLoads(UB* pcode);
extern void handlePCBs(UB* p, U i);
extern void markMasterClkOvaLists(U fdbs, RP p);
extern void rmaChildClockPropAfterWrite(UB* p);
extern void rmaSchedChildClockPropAfterWrite(UB* p, UB* pmasterList, UB val);
extern void HDLCosimProcessDUTInputChange(U inputId, void* val);
extern U rmaIsS2State(scalar s);
extern U rmaIsV2State(vec32* pval, U cbits);
extern U rmaIsW2State(vec32* pval, U cbits);
extern U rmaIsE2State(scalar* pval, U cbits);
extern void rmaUpdateRecordFor2State(HsimNodeRecord* record, U f2state);
typedef void (*FuncPtr)();
static inline U asm_bsf (U in)
{
#if defined(linux)
    U out;
    asm ("movl %1, %%eax; bsf %%eax, %%eax; movl %%eax, %0;"
        :"=r"(out)
        :"r"(in)
        :"%eax"
        );
    return out;
#else
    return 0;
#endif
}


#ifdef __cplusplus
extern "C" {
#endif
void  hsG_0 (struct dummyq_struct * I1016, EBLK  * I1017, U  I719);
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
  }
#endif
#endif /*__DO_RMAHDR_*/

